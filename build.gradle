plugins {
    id "com.gradle.plugin-publish" version "0.10.1"
    id 'jacoco'
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'codenarc'


group = 'com.github.prokod'
version = '0.10.1-SNAPSHOT'

repositories {
    jcenter()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

//Conditional Signing
ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

signing {
    required { isReleaseVersion  && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile gradleTestKit()
    testCompile ('org.spockframework:spock-core:1.2-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile 'org.xmlunit:xmlunit-core:2.6.3'
    testCompile 'org.xmlunit:xmlunit-matchers:2.6.3'
}

gradlePlugin {
    plugins {
        crossBuildPlugin {
            id = 'com.github.prokod.gradle-crossbuild'
            implementationClass = 'com.github.prokod.gradle.crossbuild.CrossBuildPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/prokod/gradle-crossbuild-scala'
    vcsUrl = 'https://github.com/prokod/gradle-crossbuild-scala'
    description = 'Adds cross building functionality to Gradle for Scala based projects'
    tags = ['gradle', 'cross-build-scala-plugins', 'cross-compile', 'scala']

    plugins {
        crossBuildPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'Gradle cross build (Scala) plugin'
        }
    }
}

uploadArchives.repositories.mavenDeployer {
    uniqueVersion = false

    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
    }

    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
    }

    pom.project {
        name 'Gradle cross build (Scala) plugin'
        packaging 'jar'
        description 'Gradle cross build (Scala) plugin.'
        url 'https://github.com/prokod/gradle-crossbuild-scala'
        inceptionYear '2016'

        scm {
            developerConnection 'git@github.com:prokod/gradle-crossbuild-scala.git'
            connection 'git://github.com/prokod/gradle-crossbuild-scala.git'
            url 'https://github.com/prokod/gradle-crossbuild-scala'
        }

        licenses {
            license {
                name 'Apache License 2.0'
                url 'https://www.apache.org/licenses/LICENSE-2.0'
            }
        }
        developers {
            developer {
                id 'noamasor'
                name 'Noam Asor'
                email 'noamas@gmail.com'
            }
        }
    }
}

codenarc {
    toolVersion = "1.1"
}

codenarcMain {
    configFile = rootProject.file("config/codenarc/CodenarcMain.groovy")
}

codenarcTest.enabled = false

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}