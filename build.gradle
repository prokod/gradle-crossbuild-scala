plugins {
    id "com.gradle.plugin-publish" version "0.12.0"
    id 'jacoco'
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'codenarc'

group = 'com.github.prokod'
version = '0.14.1-SNAPSHOT'

repositories {
    jcenter()
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

apply from: 'codecov.gradle'

//Conditional Signing
ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    testImplementation gradleTestKit()
    testImplementation ('org.spockframework:spock-core:2.1-groovy-2.5') {
        exclude module: 'groovy'
    }
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation 'org.xmlunit:xmlunit-core:2.6.3'
    testImplementation 'org.xmlunit:xmlunit-matchers:2.6.3'
}

test {
    useJUnitPlatform()
    systemProperty 'spock.configuration', rootProject.file('config/spock/SpockConfig.groovy').absolutePath
}

gradlePlugin {
    plugins {
        crossBuildPlugin {
            id = 'com.github.prokod.gradle-crossbuild'
            implementationClass = 'com.github.prokod.gradle.crossbuild.CrossBuildPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/prokod/gradle-crossbuild-scala'
    vcsUrl = 'https://github.com/prokod/gradle-crossbuild-scala'
    description = 'Adds cross building functionality to Gradle for Scala based projects'
    tags = ['gradle', 'cross-build-scala-plugins', 'cross-compile', 'scala']

    plugins {
        crossBuildPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'Gradle cross build (Scala) plugin'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier 'sources'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Gradle cross build (Scala) plugin'
                description = 'Gradle cross build (Scala) plugin.'
                url = 'https://github.com/prokod/gradle-crossbuild-scala'
                inceptionYear = '2016'
                packaging = 'jar'

                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'noamasor'
                        name = 'Noam Asor'
                        email = 'noamas@gmail.com'
                    }
                }
                scm {
                    developerConnection = 'git@github.com:prokod/gradle-crossbuild-scala.git'
                    connection = 'git://github.com/prokod/gradle-crossbuild-scala.git'
                    url = 'https://github.com/prokod/gradle-crossbuild-scala'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    if (required) {
        sign publishing.publications.mavenJava
    }
}

codenarc {
    toolVersion = "1.1"
}

codenarcMain {
    configFile = rootProject.file("config/codenarc/CodenarcMain.groovy")
}

codenarcTest.enabled = false

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}